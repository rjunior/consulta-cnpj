package main

import (
	"encoding/csv"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/rjunior/consulta-cnpj/api"
	"github.com/rjunior/consulta-cnpj/models"
	"github.com/rjunior/consulta-cnpj/utils"
)

func main() {
	// Verificar se foram fornecidos argumentos
	if len(os.Args) < 2 {
		fmt.Println("Uso: consulta-cnpj <CNPJ>")
		fmt.Println("Exemplo: consulta-cnpj 11.222.333/0001-81")
		fmt.Println("")
		fmt.Println("API utilizada: ReceitaWS (https://receitaws.com.br/)")
		fmt.Println("Nota: A API gratuita tem limita√ß√µes de taxa (3 consultas por minuto)")
		os.Exit(1)
	}

	// Pegar CNPJ do argumento da linha de comando
	cnpj := os.Args[1]

	fmt.Printf("Iniciando consulta do CNPJ %s via ReceitaWS...\n", cnpj)
	fmt.Println()

	// Validar CNPJ
	if !utils.ValidarCNPJ(cnpj) {
		fmt.Printf("‚ùå CNPJ inv√°lido: %s\n", cnpj)
		return
	}

	// Criar cliente e fazer consulta
	client := api.NewClient()
	empresa, err := client.ConsultarCNPJ(utils.LimparCNPJ(cnpj))
	if err != nil {
		fmt.Printf("‚ùå Erro ao consultar CNPJ %s: %v\n", cnpj, err)
		return
	}

	fmt.Printf("‚úÖ Sucesso: %s - %s\n", empresa.CNPJ, empresa.Nome)

	// Obter diret√≥rio atual de execu√ß√£o
	diretorioAtual, err := os.Getwd()
	if err != nil {
		fmt.Printf("‚ùå Erro ao obter diret√≥rio atual: %v\n", err)
		return
	}

	// Salvar resultados em CSV no diret√≥rio atual
	nomeArquivo := fmt.Sprintf("empresas_cnpj_%s.csv", time.Now().Format("20060102_150405"))
	caminhoCompleto := filepath.Join(diretorioAtual, nomeArquivo)

	if err := salvarCSV(empresa, caminhoCompleto); err != nil {
		fmt.Printf("‚ùå Erro ao salvar CSV: %v\n", err)
		return
	}

	fmt.Printf("\nüéâ Consulta conclu√≠da!")
	fmt.Printf("\nüìÅ Arquivo salvo em: %s\n", caminhoCompleto)
	fmt.Println("\nColunas dispon√≠veis no CSV:")
	fmt.Println("- Dados b√°sicos: CNPJ, Raz√£o Social, Nome Fantasia, Data Abertura")
	fmt.Println("- Situa√ß√£o: Situa√ß√£o Cadastral, Data Situa√ß√£o, Motivo")
	fmt.Println("- Atividade: CNAE Principal, Descri√ß√£o, Total de Atividades")
	fmt.Println("- Endere√ßo: Logradouro, N√∫mero, Bairro, CEP, Munic√≠pio, UF")
	fmt.Println("- Contato: Telefone, Email")
	fmt.Println("- Outros: Capital Social, Porte, Quantidade de S√≥cios, Natureza Jur√≠dica")
}

// Fun√ß√£o para extrair CNAE principal das atividades
func extrairCNAEPrincipal(atividades []models.Atividade) (codigo, descricao string) {
	if len(atividades) > 0 {
		return atividades[0].Code, atividades[0].Text
	}
	return "", ""
}

// Fun√ß√£o para contar s√≥cios
func contarSocios(qsa []map[string]interface{}) int {
	return len(qsa)
}

// Fun√ß√£o para salvar dados em CSV
func salvarCSV(empresa *models.CNPJResponse, caminhoArquivo string) error {
	arquivo, err := os.Create(caminhoArquivo)
	if err != nil {
		return fmt.Errorf("erro ao criar arquivo: %v", err)
	}
	defer arquivo.Close()

	writer := csv.NewWriter(arquivo)
	defer writer.Flush()

	// Escrever cabe√ßalho
	header := []string{
		"CNPJ", "Raz√£o Social", "Nome Fantasia", "Data Abertura", "Situa√ß√£o Cadastral",
		"Data Situa√ß√£o", "Motivo Situa√ß√£o", "Situa√ß√£o Especial", "Data Situa√ß√£o Especial",
		"CNAE Principal", "Descri√ß√£o CNAE Principal", "Total Atividades", "Natureza Jur√≠dica",
		"Logradouro", "N√∫mero", "Complemento", "Bairro", "CEP", "Munic√≠pio", "UF",
		"Telefone", "Email", "Capital Social", "Porte", "Qtd S√≥cios", "EFR",
	}

	if err := writer.Write(header); err != nil {
		return fmt.Errorf("erro ao escrever cabe√ßalho: %v", err)
	}

	// Escrever dados
	cnaeCode, cnaeDesc := extrairCNAEPrincipal(empresa.Atividades)
	qtdSocios := contarSocios(empresa.QSA)

	registro := []string{
		empresa.CNPJ,
		empresa.Nome,
		empresa.Fantasia,
		empresa.Abertura,
		empresa.Situacao,
		empresa.DataSituacao,
		empresa.MotivoSituacao,
		empresa.SituacaoEspecial,
		empresa.DataSituacaoEspecial,
		cnaeCode,
		cnaeDesc,
		strconv.Itoa(len(empresa.Atividades)),
		empresa.NaturezaJuridica,
		empresa.Logradouro,
		empresa.Numero,
		empresa.Complemento,
		empresa.Bairro,
		empresa.CEP,
		empresa.Municipio,
		empresa.UF,
		empresa.Telefone,
		empresa.Email,
		empresa.CapitalSocial,
		empresa.Porte,
		strconv.Itoa(qtdSocios),
		empresa.EFR,
	}

	if err := writer.Write(registro); err != nil {
		return fmt.Errorf("erro ao escrever registro: %v", err)
	}

	return nil
}
